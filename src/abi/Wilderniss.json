{"contractName":"Wilderniss","abi":[{"inputs":[{"internalType":"contract CatchDex","name":"_catchDex","type":"address"},{"internalType":"contract Shop","name":"_shop","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"NextCatchableBlock","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"CAGE_COOLDOWN_BLOCKS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"MAX_TRIES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"availableCatchables","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"cageProperties","outputs":[{"internalType":"uint16","name":"bestRate","type":"uint16"},{"internalType":"uint16","name":"worstRate","type":"uint16"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"catchDex","outputs":[{"internalType":"contract CatchDex","name":"","type":"address"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"catchables","outputs":[{"internalType":"uint16","name":"kind","type":"uint16"},{"internalType":"uint16","name":"rarity","type":"uint16"},{"internalType":"uint16","name":"maxCatchCount","type":"uint16"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"currentKind","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"currentKindCatchRate","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"kindBlockNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"shop","outputs":[{"internalType":"contract Shop","name":"","type":"address"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"throws","outputs":[{"internalType":"uint256","name":"kindBlock","type":"uint256"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"collector","type":"address"}],"name":"getThrows","outputs":[{"internalType":"uint256","name":"kindBlock","type":"uint256"},{"components":[{"internalType":"bool","name":"collected","type":"bool"},{"internalType":"uint16","name":"cageCount","type":"uint16"},{"internalType":"uint256","name":"cageType","type":"uint256"},{"internalType":"uint256","name":"throwBlock","type":"uint256"}],"internalType":"struct Wilderniss.Throw[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint16","name":"bestRate","type":"uint16"},{"internalType":"uint16","name":"worstRate","type":"uint16"}],"name":"setCage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_catchables","type":"uint256[]"}],"name":"addCatchables","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"clearCatchables","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeCatchable","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"calcCurrentKind","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint16","name":"calcKind","type":"uint16"},{"internalType":"uint256","name":"calcKindBlock","type":"uint256"},{"internalType":"uint256","name":"calcAvailableCatchables","type":"uint256"},{"internalType":"uint16","name":"calcKindCatchRate","type":"uint16"}],"stateMutability":"view","type":"function","constant":true},{"inputs":[],"name":"currentKindInfo","outputs":[{"internalType":"uint16","name":"availableKind","type":"uint16"},{"internalType":"uint256","name":"availableKindBlock","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"cageCount","type":"uint16"},{"internalType":"uint256","name":"cageType","type":"uint256"}],"name":"aWildCatchableAppears","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"offset","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"checkCages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"metadata":"{\"compiler\":{\"version\":\"0.6.3+commit.8dda9521\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract CatchDex\",\"name\":\"_catchDex\",\"type\":\"address\"},{\"internalType\":\"contract Shop\",\"name\":\"_shop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NextCatchableBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAGE_COOLDOWN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TRIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"cageCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"cageType\",\"type\":\"uint256\"}],\"name\":\"aWildCatchableAppears\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_catchables\",\"type\":\"uint256[]\"}],\"name\":\"addCatchables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableCatchables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cageProperties\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"bestRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"worstRate\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcCurrentKind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"calcKind\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"calcKindBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calcAvailableCatchables\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"calcKindCatchRate\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"catchDex\",\"outputs\":[{\"internalType\":\"contract CatchDex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"catchables\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"kind\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rarity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxCatchCount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"checkCages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearCatchables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentKind\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentKindCatchRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentKindInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"availableKind\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"availableKindBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"getThrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kindBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"collected\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"cageCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"cageType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"throwBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Wilderniss.Throw[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kindBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeCatchable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"bestRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"worstRate\",\"type\":\"uint16\"}],\"name\":\"setCage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shop\",\"outputs\":[{\"internalType\":\"contract Shop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"throws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"kindBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/rimeissner/projects/catchall/contracts/CatchCore.sol\":\"Wilderniss\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/rimeissner/projects/catchall/contracts/CatchCore.sol\":{\"keccak256\":\"0x6ab18db9bcf31bd81697f2347a80136ab6a75c8e3d8aa6efcde3aefddf057631\",\"urls\":[\"bzz-raw://d0c1cf0edd9901641d5221821db3c91ca1019b6013ddcf9b11c041cc979cbc0e\",\"dweb:/ipfs/QmcfhJJDfk7bnhd9kJ8Xt1RxGg5BskXbsYctMcU7e9UZ1D\"]},\"/Users/rimeissner/projects/catchall/contracts/erc1155/ERC1155.sol\":{\"keccak256\":\"0x6f01fd272fc8c14dd9550680a82b1b247242937e489874eb7849276017d55d5f\",\"urls\":[\"bzz-raw://df5de4a4652ca4412f5ad42809aec6e4b1f6b6b09843e34e02eb2930e6003f8d\",\"dweb:/ipfs/QmWCb26saMoGCSQcNazJNupR551LNvv8hU5e65a9mWfrVx\"]},\"/Users/rimeissner/projects/catchall/contracts/erc1155/ERC165.sol\":{\"keccak256\":\"0x9ea2121a412b1d495140f0983c721cdd8daa5a25705c4458e5b16c26f7a63fa2\",\"urls\":[\"bzz-raw://5b24c1e2a04d80de994174c5c6ab1bf9283c35eb9bd52b81f9b23d4bab6964af\",\"dweb:/ipfs/Qmb6npkgg2nrFnJWtBTr6dAz1h6E6chhyAczrEY4fj9LrP\"]},\"/Users/rimeissner/projects/catchall/contracts/erc1155/IERC1155.sol\":{\"keccak256\":\"0x09d74bff4ebbf55ef609d499674549fb527ff7eea54564a57c90f520cfe52e4a\",\"urls\":[\"bzz-raw://d4914eb4a83f7147ef82b3f4ee16ca714f3b2232afce64fe6a57c0d9beca7b43\",\"dweb:/ipfs/QmR5es52BhpqWy11uJcow5GHKmZRKYKbjFKMmqd8RYvZFN\"]},\"/Users/rimeissner/projects/catchall/contracts/erc1155/IERC1155Receiver.sol\":{\"keccak256\":\"0x79886eb0d7e661e2736907f91fa187f84fe7eb720e82f59468f33d04d1d6e88f\",\"urls\":[\"bzz-raw://db47a9aad34c59069b1e424bec20c5378d8fc77a69aab0b2a081b896875f12c7\",\"dweb:/ipfs/QmfKJQYCVU6Rg1zjNt5j6MpNm3WNnDodqTTJRsF99ECw4W\"]},\"/Users/rimeissner/projects/catchall/contracts/erc1155/IERC165.sol\":{\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\",\"urls\":[\"bzz-raw://b0167043c1938b56904deaa481a73041aa4a9e054c60db0b0dfbebfe7869c06a\",\"dweb:/ipfs/QmUoYjhymBr6WUpExKgRvKxXD5fcdpQEe1o9ResKZu6CC5\"]},\"/Users/rimeissner/projects/catchall/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xe4ed9d633e8e678e8ece3756e4002cc7989b72cd29a17ecdacdabf4fd48820a7\",\"urls\":[\"bzz-raw://03a55c81a7d4c93a1ca6d9b931830c1fde2799bfbbf5841321f67e7b056c36c2\",\"dweb:/ipfs/QmbcgdfB278NvzVZKjA7Jf1NjSeCCQ2277mJGL4UskyS56\"]},\"/Users/rimeissner/projects/catchall/contracts/utils/Address.sol\":{\"keccak256\":\"0x3112bd39392856c0d019c29f625e8a61413e1be956b21e702a3d59e241422454\",\"urls\":[\"bzz-raw://e8c1617c8520f9881a9135f41b06bfca61bebce937bfc3408908432aaa1f4e52\",\"dweb:/ipfs/Qme7acqqR1t2e91ctjAFiS7KCvyNRhX8BchJmVSEHTZu2g\"]},\"@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x0de74dfa6b37943c1b834cbd8fb7a8d052e5ff80c7adb33692102dd6cd2985e9\",\"urls\":[\"bzz-raw://9d2d827fcf4a838f5821732c0acd6a40d21c2a5a2cfe2563feec91465f47bb60\",\"dweb:/ipfs/Qmex3wMKf5Sghbfvr288RUg1kP2uAyTMf11w83WbMbpQQc\"]},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x039ba4cb83f1b30a3c575283aebeab66035aa4a3d5c88e73a67dbfba3691ac23\",\"urls\":[\"bzz-raw://7e319b9647837e7b286b01ef90e1b2dc62aea6d17acc11145c822193b6454db1\",\"dweb:/ipfs/QmW5vUEeePdJfj3abT8XHcZKideyCpSuDnz65Vfp6yu62P\"]}},\"version\":1}","bytecode":"0x60806040523480156200001157600080fd5b5060405162002b1838038062002b188339818101604052620000379190810190620001a7565b6000620000496200017160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000278565b600033905090565b6000815190506200018a8162000244565b92915050565b600081519050620001a1816200025e565b92915050565b60008060408385031215620001bb57600080fd5b6000620001cb8582860162000179565b9250506020620001de8582860162000190565b9150509250929050565b6000620001f58262000224565b9050919050565b60006200020982620001e8565b9050919050565b60006200021d82620001e8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200024f81620001fc565b81146200025b57600080fd5b50565b620002698162000210565b81146200027557600080fd5b50565b61289080620002886000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638740b977116100c3578063bf9593fd1161007c578063bf9593fd1461039a578063c0f73baa146103bc578063d71477ff146103d8578063e19d5edf146103f4578063f2fde38b14610424578063f7a69a201461044057610158565b80638740b977146102d45780638da5cb5b146102de5780638f32d59b146102fc578063905c1b9b1461031a578063927269f114610338578063bb2b07441461036a57610158565b80635a3333c2116101155780635a3333c2146102105780635d1099701461022e578063633285bb1461025f578063715018a6146102905780637bdd98b71461029a57806385e008ff146102b657610158565b80630881fa0d1461015d57806312ffd9cf1461017b5780631b8d5e3714610199578063469632de146101b857806349182ce0146101d457806352cba681146101f2575b600080fd5b61016561045e565b60405161017291906123ff565b60405180910390f35b610183610484565b60405161019091906123e4565b60405180910390f35b6101a16104aa565b6040516101af929190612595565b60405180910390f35b6101d260048036036101cd9190810190611df5565b610668565b005b6101dc610791565b6040516101e991906125be565b60405180910390f35b6101fa610796565b60405161020791906125be565b60405180910390f35b61021861079c565b604051610225919061251a565b60405180910390f35b61024860048036036102439190810190611dcc565b6107b0565b604051610256929190612535565b60405180910390f35b61027960048036036102749190810190611cfd565b6107f0565b6040516102879291906125d9565b60405180910390f35b610298610917565b005b6102b460048036036102af9190810190611d90565b610a1d565b005b6102be610c77565b6040516102cb919061251a565b60405180910390f35b6102dc610c8b565b005b6102e6610ce2565b6040516102f3919061229b565b60405180910390f35b610304610d0b565b604051610311919061235b565b60405180910390f35b610322610d69565b60405161032f91906125be565b60405180910390f35b610352600480360361034d9190810190611dcc565b610d6f565b6040516103619392919061255e565b60405180910390f35b610384600480360361037f9190810190611e44565b610dcc565b60405161039191906125be565b60405180910390f35b6103a2610efb565b6040516103b3959493929190612376565b60405180910390f35b6103d660048036036103d19190810190611d26565b6111e2565b005b6103f260048036036103ed9190810190611dcc565b611323565b005b61040e60048036036104099190810190611cfd565b6114e0565b60405161041b91906125be565b60405180910390f35b61043e60048036036104399190810190611cfd565b6114fe565b005b610448611551565b60405161045591906125be565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060006104ba610efb565b809550819650829850839950849750505050505082156106615784600260146101000a81548161ffff021916908361ffff1602179055508160038190555080600260166101000a81548161ffff021916908361ffff160217905550836004819055506000600260149054906101000a900461ffff1661ffff161415610571577f9622b892afa9dc12bb0afca1095678bb623adb8a0b53eb4874e18ee00c54de848460405161056891906125be565b60405180910390a15b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e6041be6105b7611556565b7f8096053b85575944c326764cc6482f6906db772a41aa99f7533f62dcadddf72b60016040518463ffffffff1660e01b81526004016105f8939291906122b6565b600060405180830381600087803b15801561061257600080fd5b505af1925050508015610623575060015b61065f573d8060008114610653576040519150601f19603f3d011682016040523d82523d6000602084013e610658565b606091505b5050610660565b5b5b5050509091565b610670610d0b565b6106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906124fa565b60405180910390fd5b60008261ffff161415806106c8575060008161ffff1614155b1561074b5760405180604001604052808361ffff1681526020018261ffff168152506007600085815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555090505061078c565b60076000848152602001908152602001600020600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff021916905550505b505050565b600281565b60045481565b600260149054906101000a900461ffff1681565b60076020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900461ffff16905082565b600060606107fc6119e8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156108f657838290600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016001820154815260200160028201548152505081526020019060010190610875565b50505050815250509050806000015181602001518090509250925050915091565b61091f610d0b565b61095e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610955906124fa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006007600083815260200190815260200160002060000160029054906101000a900461ffff1661ffff161415610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a80906124da565b60405180910390fd5b6000610a936104aa565b9050809150506000600260149054906101000a900461ffff1661ffff161415610abc5750610c73565b6000610ac6611556565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663345cad7e8285876040518463ffffffff1660e01b8152600401610b2793929190612324565b600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015414610bc157806001016000610bb79190611a02565b8281600001819055505b8060010160405180608001604052806000151581526020018761ffff16815260200186815260200143815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff160217905550604082015181600101556060820151816002015550505050505b5050565b600260169054906101000a900461ffff1681565b610c93610d0b565b610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc9906124fa565b60405180910390fd5b60056000610ce09190611a26565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d4d611556565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60035481565b60058181548110610d7c57fe5b906000526020600020016000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900461ffff16908060000160049054906101000a900461ffff16905083565b6000806000610dd96104aa565b809250819350505060008261ffff161415610df957600092505050610ef5565b6000610e03611556565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015414610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e859061241a565b60405180910390fd5b600080905060008890505b878901811015610eeb57610edc610ecd846001018381548110610eb857fe5b9060005260206000209060030201888761155e565b8361182490919063ffffffff16565b91508080600101915050610e99565b5080955050505050505b92915050565b60008060008060006004549250600093506000915060009050824311610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d9061243a565b60405180910390fd5b4360ff84011015610f7c57602a43019250600184848484945094509450945094506111db565b600260149054906101000a900461ffff16935060008461ffff1614610fc25760008484600354600260169054906101000a900461ffff16945094509450945094506111db565b600060058054905090506000844090506000600161fffe8360001c81610fe457fe5b060190505b60008761ffff1614156111c757610ffe611a47565b6005848460001c8161100c57fe5b0661ffff168154811061101b57fe5b906000526020600020016040518060600160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a900461ffff1661ffff1661ffff1681526020016000820160049054906101000a900461ffff1661ffff1661ffff168152505090506000816020015161ffff161180156110b657508161ffff16816020015161ffff1610155b156111865780600001519750806040015161ffff169550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fbf0fdb896040518263ffffffff1660e01b8152600401611128919061251a565b60e06040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111789190810190611d67565b6080015160ff1694506111c1565b60028261ffff168161119457fe5b049150826040516020016111a89190612280565b6040516020818303038152906040528051906020012092505b50610fe9565b600187878787975097509750975097505050505b9091929394565b6111ea610d0b565b611229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611220906124fa565b60405180910390fd5b60008090505b815181101561131f57600082828151811061124657fe5b6020026020010151905060056040518060600160405280602084901c61ffff168152602001601084901c61ffff1681526020018361ffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff160217905550505050808060010191505061122f565b5050565b61132b610d0b565b61136a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906124fa565b60405180910390fd5b600060058054905090508082106113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad9061247a565b60405180910390fd5b600582815481106113c357fe5b90600052602060002001600560018303815481106113dd57fe5b906000526020600020016000820160009054906101000a900461ffff168160000160006101000a81548161ffff021916908361ffff1602179055506000820160029054906101000a900461ffff168160000160026101000a81548161ffff021916908361ffff1602179055506000820160049054906101000a900461ffff168160000160046101000a81548161ffff021916908361ffff160217905550905050600580548061148857fe5b60019003818190600052602060002001600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff02191690556000820160046101000a81549061ffff0219169055505090555050565b60066020528060005260406000206000915090508060000154905081565b611506610d0b565b611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153c906124fa565b60405180910390fd5b61154e81611879565b50565b600a81565b600033905090565b60008360000160009054906101000a900460ff1615611580576000905061181d565b600061159a6002866002015461182490919063ffffffff16565b90504381106115ad57600091505061181d565b60018560000160006101000a81548160ff0219169083151502179055506000600354905060008114156115e55760009250505061181d565b60008660000160019054906101000a900461ffff1661ffff169050600080905061160d611a74565b600760008a6001015481526020019081526020016000206040518060400160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a900461ffff1661ffff1661ffff1681525050905060008540905060008090505b848110156117d0576000801b8214156116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c2906124ba565b60405180910390fd5b6116d4826119a7565b915060008360000151846000015185602001510361ffff168460001c816116f757fe5b06019050600260169054906101000a900461ffff1661ffff168161ffff1610156117b5578480600101955050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36a211a8b8d866040518463ffffffff1660e01b8152600401611782939291906122ed565b600060405180830381600087803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b505050505b8685106117c257506117d0565b50808060010191505061167d565b5082850360038190555082851415611813576117ee602a43016119d7565b6004819055506000600260146101000a81548161ffff021916908361ffff1602179055505b8296505050505050505b9392505050565b60008082840190508381101561186f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118669061249a565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e09061245a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000816040516020016119ba91906123c9565b604051602081830303815290604052805190602001209050919050565b600081600481905550819050919050565b604051806040016040528060008152602001606081525090565b5080546000825560030290600052602060002090810190611a239190611a96565b50565b5080546000825590600052602060002090810190611a449190611aee565b50565b6040518060600160405280600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060400160405280600061ffff168152602001600061ffff1681525090565b611aeb91905b80821115611ae757600080820160006101000a81549060ff02191690556000820160016101000a81549061ffff02191690556001820160009055600282016000905550600301611a9c565b5090565b90565b611b4991905b80821115611b4557600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff02191690556000820160046101000a81549061ffff021916905550600101611af4565b5090565b90565b600081359050611b5b816127e7565b92915050565b600082601f830112611b7257600080fd5b8135611b85611b8082612636565b612609565b91508181835260208401935060208101905083856020840282011115611baa57600080fd5b60005b83811015611bda5781611bc08882611cbe565b845260208401935060208301925050600181019050611bad565b5050505092915050565b600060e08284031215611bf657600080fd5b611c0060e0612609565b90506000611c1084828501611ca9565b6000830152506020611c2484828501611ce8565b6020830152506040611c3884828501611ce8565b6040830152506060611c4c84828501611ce8565b6060830152506080611c6084828501611ce8565b60808301525060a0611c7484828501611ca9565b60a08301525060c0611c8884828501611cd3565b60c08301525092915050565b600081359050611ca3816127fe565b92915050565b600081519050611cb8816127fe565b92915050565b600081359050611ccd81612815565b92915050565b600081519050611ce28161282c565b92915050565b600081519050611cf781612843565b92915050565b600060208284031215611d0f57600080fd5b6000611d1d84828501611b4c565b91505092915050565b600060208284031215611d3857600080fd5b600082013567ffffffffffffffff811115611d5257600080fd5b611d5e84828501611b61565b91505092915050565b600060e08284031215611d7957600080fd5b6000611d8784828501611be4565b91505092915050565b60008060408385031215611da357600080fd5b6000611db185828601611c94565b9250506020611dc285828601611cbe565b9150509250929050565b600060208284031215611dde57600080fd5b6000611dec84828501611cbe565b91505092915050565b600080600060608486031215611e0a57600080fd5b6000611e1886828701611cbe565b9350506020611e2986828701611c94565b9250506040611e3a86828701611c94565b9150509250925092565b60008060408385031215611e5757600080fd5b6000611e6585828601611cbe565b9250506020611e7685828601611cbe565b9150509250929050565b6000611e8c83836121e0565b60808301905092915050565b611ea181612729565b82525050565b611eb0816126a8565b82525050565b6000611ec18261266e565b611ecb8185612686565b9350611ed68361265e565b8060005b83811015611f07578151611eee8882611e80565b9750611ef983612679565b925050600181019050611eda565b5085935050505092915050565b611f1d816126ba565b82525050565b611f2c816126ba565b82525050565b611f3b816126c6565b82525050565b611f52611f4d826126c6565b6127dd565b82525050565b611f618161273b565b82525050565b611f708161275f565b82525050565b611f7f81612783565b82525050565b611f8e81612795565b82525050565b6000611fa1600f83612697565b91507f4e6f2061637469766520636167657300000000000000000000000000000000006000830152602082019050919050565b6000611fe1602083612697565b91507f54686520636174636861626c6520646964206e6f7420617070656172207965746000830152602082019050919050565b6000612021602683612697565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612087600383612697565b91507f4f4f4200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006120c7601b83612697565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612107600583612697565b91507f55707073210000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612147602183612697565b91507f4920646f6e2774206b6e6f77207768617420746f20646f20776974682074686960008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006121ad602083612697565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6080820160008201516121f66000850182611f14565b5060208201516122096020850182612235565b50604082015161221c6040850182612262565b50606082015161222f6060850182612262565b50505050565b61223e816126d0565b82525050565b61224d816126d0565b82525050565b61225c816127cb565b82525050565b61226b816126fe565b82525050565b61227a816126fe565b82525050565b600061228c8284611f41565b60208201915081905092915050565b60006020820190506122b06000830184611ea7565b92915050565b60006060820190506122cb6000830186611e98565b6122d86020830185611f85565b6122e56040830184611f76565b949350505050565b60006060820190506123026000830186611ea7565b61230f6020830185612244565b61231c6040830184611f32565b949350505050565b60006060820190506123396000830186611ea7565b6123466020830185612271565b6123536040830184612253565b949350505050565b60006020820190506123706000830184611f23565b92915050565b600060a08201905061238b6000830188611f23565b6123986020830187612244565b6123a56040830186612271565b6123b26060830185612271565b6123bf6080830184612244565b9695505050505050565b60006020820190506123de6000830184611f32565b92915050565b60006020820190506123f96000830184611f58565b92915050565b60006020820190506124146000830184611f67565b92915050565b6000602082019050818103600083015261243381611f94565b9050919050565b6000602082019050818103600083015261245381611fd4565b9050919050565b6000602082019050818103600083015261247381612014565b9050919050565b600060208201905081810360008301526124938161207a565b9050919050565b600060208201905081810360008301526124b3816120ba565b9050919050565b600060208201905081810360008301526124d3816120fa565b9050919050565b600060208201905081810360008301526124f38161213a565b9050919050565b60006020820190508181036000830152612513816121a0565b9050919050565b600060208201905061252f6000830184612244565b92915050565b600060408201905061254a6000830185612244565b6125576020830184612244565b9392505050565b60006060820190506125736000830186612244565b6125806020830185612244565b61258d6040830184612244565b949350505050565b60006040820190506125aa6000830185612244565b6125b76020830184612271565b9392505050565b60006020820190506125d36000830184612271565b92915050565b60006040820190506125ee6000830185612271565b81810360208301526126008184611eb6565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561262c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561264d57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006126b3826126de565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000612734826127a7565b9050919050565b60006127468261274d565b9050919050565b6000612758826126de565b9050919050565b600061276a82612771565b9050919050565b600061277c826126de565b9050919050565b600061278e826126fe565b9050919050565b60006127a0826126fe565b9050919050565b60006127b2826127b9565b9050919050565b60006127c4826126de565b9050919050565b60006127d6826126d0565b9050919050565b6000819050919050565b6127f0816126a8565b81146127fb57600080fd5b50565b612807816126d0565b811461281257600080fd5b50565b61281e816126fe565b811461282957600080fd5b50565b61283581612708565b811461284057600080fd5b50565b61284c8161271c565b811461285757600080fd5b5056fea264697066735822122090f9ce1235aa887adcc6a6181e95833340079f5f97b0fedb37bd3b9a0decfd8164736f6c63430006030033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638740b977116100c3578063bf9593fd1161007c578063bf9593fd1461039a578063c0f73baa146103bc578063d71477ff146103d8578063e19d5edf146103f4578063f2fde38b14610424578063f7a69a201461044057610158565b80638740b977146102d45780638da5cb5b146102de5780638f32d59b146102fc578063905c1b9b1461031a578063927269f114610338578063bb2b07441461036a57610158565b80635a3333c2116101155780635a3333c2146102105780635d1099701461022e578063633285bb1461025f578063715018a6146102905780637bdd98b71461029a57806385e008ff146102b657610158565b80630881fa0d1461015d57806312ffd9cf1461017b5780631b8d5e3714610199578063469632de146101b857806349182ce0146101d457806352cba681146101f2575b600080fd5b61016561045e565b60405161017291906123ff565b60405180910390f35b610183610484565b60405161019091906123e4565b60405180910390f35b6101a16104aa565b6040516101af929190612595565b60405180910390f35b6101d260048036036101cd9190810190611df5565b610668565b005b6101dc610791565b6040516101e991906125be565b60405180910390f35b6101fa610796565b60405161020791906125be565b60405180910390f35b61021861079c565b604051610225919061251a565b60405180910390f35b61024860048036036102439190810190611dcc565b6107b0565b604051610256929190612535565b60405180910390f35b61027960048036036102749190810190611cfd565b6107f0565b6040516102879291906125d9565b60405180910390f35b610298610917565b005b6102b460048036036102af9190810190611d90565b610a1d565b005b6102be610c77565b6040516102cb919061251a565b60405180910390f35b6102dc610c8b565b005b6102e6610ce2565b6040516102f3919061229b565b60405180910390f35b610304610d0b565b604051610311919061235b565b60405180910390f35b610322610d69565b60405161032f91906125be565b60405180910390f35b610352600480360361034d9190810190611dcc565b610d6f565b6040516103619392919061255e565b60405180910390f35b610384600480360361037f9190810190611e44565b610dcc565b60405161039191906125be565b60405180910390f35b6103a2610efb565b6040516103b3959493929190612376565b60405180910390f35b6103d660048036036103d19190810190611d26565b6111e2565b005b6103f260048036036103ed9190810190611dcc565b611323565b005b61040e60048036036104099190810190611cfd565b6114e0565b60405161041b91906125be565b60405180910390f35b61043e60048036036104399190810190611cfd565b6114fe565b005b610448611551565b60405161045591906125be565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060006104ba610efb565b809550819650829850839950849750505050505082156106615784600260146101000a81548161ffff021916908361ffff1602179055508160038190555080600260166101000a81548161ffff021916908361ffff160217905550836004819055506000600260149054906101000a900461ffff1661ffff161415610571577f9622b892afa9dc12bb0afca1095678bb623adb8a0b53eb4874e18ee00c54de848460405161056891906125be565b60405180910390a15b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e6041be6105b7611556565b7f8096053b85575944c326764cc6482f6906db772a41aa99f7533f62dcadddf72b60016040518463ffffffff1660e01b81526004016105f8939291906122b6565b600060405180830381600087803b15801561061257600080fd5b505af1925050508015610623575060015b61065f573d8060008114610653576040519150601f19603f3d011682016040523d82523d6000602084013e610658565b606091505b5050610660565b5b5b5050509091565b610670610d0b565b6106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906124fa565b60405180910390fd5b60008261ffff161415806106c8575060008161ffff1614155b1561074b5760405180604001604052808361ffff1681526020018261ffff168152506007600085815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555090505061078c565b60076000848152602001908152602001600020600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff021916905550505b505050565b600281565b60045481565b600260149054906101000a900461ffff1681565b60076020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900461ffff16905082565b600060606107fc6119e8565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156108f657838290600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016001820154815260200160028201548152505081526020019060010190610875565b50505050815250509050806000015181602001518090509250925050915091565b61091f610d0b565b61095e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610955906124fa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006007600083815260200190815260200160002060000160029054906101000a900461ffff1661ffff161415610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a80906124da565b60405180910390fd5b6000610a936104aa565b9050809150506000600260149054906101000a900461ffff1661ffff161415610abc5750610c73565b6000610ac6611556565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663345cad7e8285876040518463ffffffff1660e01b8152600401610b2793929190612324565b600060405180830381600087803b158015610b4157600080fd5b505af1158015610b55573d6000803e3d6000fd5b505050506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015414610bc157806001016000610bb79190611a02565b8281600001819055505b8060010160405180608001604052806000151581526020018761ffff16815260200186815260200143815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff160217905550604082015181600101556060820151816002015550505050505b5050565b600260169054906101000a900461ffff1681565b610c93610d0b565b610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc9906124fa565b60405180910390fd5b60056000610ce09190611a26565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d4d611556565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60035481565b60058181548110610d7c57fe5b906000526020600020016000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900461ffff16908060000160049054906101000a900461ffff16905083565b6000806000610dd96104aa565b809250819350505060008261ffff161415610df957600092505050610ef5565b6000610e03611556565b90506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015414610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e859061241a565b60405180910390fd5b600080905060008890505b878901811015610eeb57610edc610ecd846001018381548110610eb857fe5b9060005260206000209060030201888761155e565b8361182490919063ffffffff16565b91508080600101915050610e99565b5080955050505050505b92915050565b60008060008060006004549250600093506000915060009050824311610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d9061243a565b60405180910390fd5b4360ff84011015610f7c57602a43019250600184848484945094509450945094506111db565b600260149054906101000a900461ffff16935060008461ffff1614610fc25760008484600354600260169054906101000a900461ffff16945094509450945094506111db565b600060058054905090506000844090506000600161fffe8360001c81610fe457fe5b060190505b60008761ffff1614156111c757610ffe611a47565b6005848460001c8161100c57fe5b0661ffff168154811061101b57fe5b906000526020600020016040518060600160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a900461ffff1661ffff1661ffff1681526020016000820160049054906101000a900461ffff1661ffff1661ffff168152505090506000816020015161ffff161180156110b657508161ffff16816020015161ffff1610155b156111865780600001519750806040015161ffff169550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fbf0fdb896040518263ffffffff1660e01b8152600401611128919061251a565b60e06040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111789190810190611d67565b6080015160ff1694506111c1565b60028261ffff168161119457fe5b049150826040516020016111a89190612280565b6040516020818303038152906040528051906020012092505b50610fe9565b600187878787975097509750975097505050505b9091929394565b6111ea610d0b565b611229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611220906124fa565b60405180910390fd5b60008090505b815181101561131f57600082828151811061124657fe5b6020026020010151905060056040518060600160405280602084901c61ffff168152602001601084901c61ffff1681526020018361ffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff160217905550505050808060010191505061122f565b5050565b61132b610d0b565b61136a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906124fa565b60405180910390fd5b600060058054905090508082106113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad9061247a565b60405180910390fd5b600582815481106113c357fe5b90600052602060002001600560018303815481106113dd57fe5b906000526020600020016000820160009054906101000a900461ffff168160000160006101000a81548161ffff021916908361ffff1602179055506000820160029054906101000a900461ffff168160000160026101000a81548161ffff021916908361ffff1602179055506000820160049054906101000a900461ffff168160000160046101000a81548161ffff021916908361ffff160217905550905050600580548061148857fe5b60019003818190600052602060002001600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff02191690556000820160046101000a81549061ffff0219169055505090555050565b60066020528060005260406000206000915090508060000154905081565b611506610d0b565b611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153c906124fa565b60405180910390fd5b61154e81611879565b50565b600a81565b600033905090565b60008360000160009054906101000a900460ff1615611580576000905061181d565b600061159a6002866002015461182490919063ffffffff16565b90504381106115ad57600091505061181d565b60018560000160006101000a81548160ff0219169083151502179055506000600354905060008114156115e55760009250505061181d565b60008660000160019054906101000a900461ffff1661ffff169050600080905061160d611a74565b600760008a6001015481526020019081526020016000206040518060400160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a900461ffff1661ffff1661ffff1681525050905060008540905060008090505b848110156117d0576000801b8214156116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c2906124ba565b60405180910390fd5b6116d4826119a7565b915060008360000151846000015185602001510361ffff168460001c816116f757fe5b06019050600260169054906101000a900461ffff1661ffff168161ffff1610156117b5578480600101955050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36a211a8b8d866040518463ffffffff1660e01b8152600401611782939291906122ed565b600060405180830381600087803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b505050505b8685106117c257506117d0565b50808060010191505061167d565b5082850360038190555082851415611813576117ee602a43016119d7565b6004819055506000600260146101000a81548161ffff021916908361ffff1602179055505b8296505050505050505b9392505050565b60008082840190508381101561186f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118669061249a565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e09061245a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000816040516020016119ba91906123c9565b604051602081830303815290604052805190602001209050919050565b600081600481905550819050919050565b604051806040016040528060008152602001606081525090565b5080546000825560030290600052602060002090810190611a239190611a96565b50565b5080546000825590600052602060002090810190611a449190611aee565b50565b6040518060600160405280600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060400160405280600061ffff168152602001600061ffff1681525090565b611aeb91905b80821115611ae757600080820160006101000a81549060ff02191690556000820160016101000a81549061ffff02191690556001820160009055600282016000905550600301611a9c565b5090565b90565b611b4991905b80821115611b4557600080820160006101000a81549061ffff02191690556000820160026101000a81549061ffff02191690556000820160046101000a81549061ffff021916905550600101611af4565b5090565b90565b600081359050611b5b816127e7565b92915050565b600082601f830112611b7257600080fd5b8135611b85611b8082612636565b612609565b91508181835260208401935060208101905083856020840282011115611baa57600080fd5b60005b83811015611bda5781611bc08882611cbe565b845260208401935060208301925050600181019050611bad565b5050505092915050565b600060e08284031215611bf657600080fd5b611c0060e0612609565b90506000611c1084828501611ca9565b6000830152506020611c2484828501611ce8565b6020830152506040611c3884828501611ce8565b6040830152506060611c4c84828501611ce8565b6060830152506080611c6084828501611ce8565b60808301525060a0611c7484828501611ca9565b60a08301525060c0611c8884828501611cd3565b60c08301525092915050565b600081359050611ca3816127fe565b92915050565b600081519050611cb8816127fe565b92915050565b600081359050611ccd81612815565b92915050565b600081519050611ce28161282c565b92915050565b600081519050611cf781612843565b92915050565b600060208284031215611d0f57600080fd5b6000611d1d84828501611b4c565b91505092915050565b600060208284031215611d3857600080fd5b600082013567ffffffffffffffff811115611d5257600080fd5b611d5e84828501611b61565b91505092915050565b600060e08284031215611d7957600080fd5b6000611d8784828501611be4565b91505092915050565b60008060408385031215611da357600080fd5b6000611db185828601611c94565b9250506020611dc285828601611cbe565b9150509250929050565b600060208284031215611dde57600080fd5b6000611dec84828501611cbe565b91505092915050565b600080600060608486031215611e0a57600080fd5b6000611e1886828701611cbe565b9350506020611e2986828701611c94565b9250506040611e3a86828701611c94565b9150509250925092565b60008060408385031215611e5757600080fd5b6000611e6585828601611cbe565b9250506020611e7685828601611cbe565b9150509250929050565b6000611e8c83836121e0565b60808301905092915050565b611ea181612729565b82525050565b611eb0816126a8565b82525050565b6000611ec18261266e565b611ecb8185612686565b9350611ed68361265e565b8060005b83811015611f07578151611eee8882611e80565b9750611ef983612679565b925050600181019050611eda565b5085935050505092915050565b611f1d816126ba565b82525050565b611f2c816126ba565b82525050565b611f3b816126c6565b82525050565b611f52611f4d826126c6565b6127dd565b82525050565b611f618161273b565b82525050565b611f708161275f565b82525050565b611f7f81612783565b82525050565b611f8e81612795565b82525050565b6000611fa1600f83612697565b91507f4e6f2061637469766520636167657300000000000000000000000000000000006000830152602082019050919050565b6000611fe1602083612697565b91507f54686520636174636861626c6520646964206e6f7420617070656172207965746000830152602082019050919050565b6000612021602683612697565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612087600383612697565b91507f4f4f4200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006120c7601b83612697565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612107600583612697565b91507f55707073210000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612147602183612697565b91507f4920646f6e2774206b6e6f77207768617420746f20646f20776974682074686960008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006121ad602083612697565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6080820160008201516121f66000850182611f14565b5060208201516122096020850182612235565b50604082015161221c6040850182612262565b50606082015161222f6060850182612262565b50505050565b61223e816126d0565b82525050565b61224d816126d0565b82525050565b61225c816127cb565b82525050565b61226b816126fe565b82525050565b61227a816126fe565b82525050565b600061228c8284611f41565b60208201915081905092915050565b60006020820190506122b06000830184611ea7565b92915050565b60006060820190506122cb6000830186611e98565b6122d86020830185611f85565b6122e56040830184611f76565b949350505050565b60006060820190506123026000830186611ea7565b61230f6020830185612244565b61231c6040830184611f32565b949350505050565b60006060820190506123396000830186611ea7565b6123466020830185612271565b6123536040830184612253565b949350505050565b60006020820190506123706000830184611f23565b92915050565b600060a08201905061238b6000830188611f23565b6123986020830187612244565b6123a56040830186612271565b6123b26060830185612271565b6123bf6080830184612244565b9695505050505050565b60006020820190506123de6000830184611f32565b92915050565b60006020820190506123f96000830184611f58565b92915050565b60006020820190506124146000830184611f67565b92915050565b6000602082019050818103600083015261243381611f94565b9050919050565b6000602082019050818103600083015261245381611fd4565b9050919050565b6000602082019050818103600083015261247381612014565b9050919050565b600060208201905081810360008301526124938161207a565b9050919050565b600060208201905081810360008301526124b3816120ba565b9050919050565b600060208201905081810360008301526124d3816120fa565b9050919050565b600060208201905081810360008301526124f38161213a565b9050919050565b60006020820190508181036000830152612513816121a0565b9050919050565b600060208201905061252f6000830184612244565b92915050565b600060408201905061254a6000830185612244565b6125576020830184612244565b9392505050565b60006060820190506125736000830186612244565b6125806020830185612244565b61258d6040830184612244565b949350505050565b60006040820190506125aa6000830185612244565b6125b76020830184612271565b9392505050565b60006020820190506125d36000830184612271565b92915050565b60006040820190506125ee6000830185612271565b81810360208301526126008184611eb6565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561262c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561264d57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006126b3826126de565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000612734826127a7565b9050919050565b60006127468261274d565b9050919050565b6000612758826126de565b9050919050565b600061276a82612771565b9050919050565b600061277c826126de565b9050919050565b600061278e826126fe565b9050919050565b60006127a0826126fe565b9050919050565b60006127b2826127b9565b9050919050565b60006127c4826126de565b9050919050565b60006127d6826126d0565b9050919050565b6000819050919050565b6127f0816126a8565b81146127fb57600080fd5b50565b612807816126d0565b811461281257600080fd5b50565b61281e816126fe565b811461282957600080fd5b50565b61283581612708565b811461284057600080fd5b50565b61284c8161271c565b811461285757600080fd5b5056fea264697066735822122090f9ce1235aa887adcc6a6181e95833340079f5f97b0fedb37bd3b9a0decfd8164736f6c63430006030033","sourceMap":"808:8036:0:-:0;;;1762:110;5:9:-1;2:2;;;27:1;24;17:12;2:2;1762:110:0;;;;;;;;;;;;;;;;;;;;;;;;698:17:13;718:12;:10;;;:12;;:::i;:::-;698:32;;749:9;740:6;;:18;;;;;;;;;;;;;;;;;;806:9;773:43;;802:1;773:43;;;;;;;;;;;;664:159;1834:9:0;1823:8;;:20;;;;;;;;;;;;;;;;;;1860:5;1853:4;;:12;;;;;;;;;;;;;;;;;;1762:110;;808:8036;;735:104:12;788:15;822:10;815:17;;735:104;:::o;5:168:-1:-;;106:6;100:13;91:22;;118:50;162:5;118:50;;;85:88;;;;;180:160;;277:6;271:13;262:22;;289:46;329:5;289:46;;;256:84;;;;;347:459;;;509:2;497:9;488:7;484:23;480:32;477:2;;;525:1;522;515:12;477:2;560:1;577:81;650:7;641:6;630:9;626:22;577:81;;;567:91;;539:125;695:2;713:77;782:7;773:6;762:9;758:22;713:77;;;703:87;;674:122;471:335;;;;;;813:91;;875:24;893:5;875:24;;;864:35;;858:46;;;;911:108;;990:24;1008:5;990:24;;;979:35;;973:46;;;;1026:104;;1101:24;1119:5;1101:24;;;1090:35;;1084:46;;;;1137:121;;1210:42;1203:5;1199:54;1188:65;;1182:76;;;;1265:151;1351:41;1386:5;1351:41;;;1344:5;1341:52;1331:2;;1407:1;1404;1397:12;1331:2;1325:91;;1423:143;1505:37;1536:5;1505:37;;;1498:5;1495:48;1485:2;;1557:1;1554;1547:12;1485:2;1479:87;;808:8036:0;;;;;;;","deployedSourceMap":"808:8036:0:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;808:8036:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1362:16:0;;;:::i;:::-;;;;;;;;;;;;;;;;1332:24;;;:::i;:::-;;;;;;;;;;;;;;;;4997:811;;;:::i;:::-;;;;;;;;;;;;;;;;;2117:258;;;;;;;;;;;;;;;;:::i;:::-;;1385:45;;;:::i;:::-;;;;;;;;;;;;;;;;1585:27;;;:::i;:::-;;;;;;;;;;;;;;;;1477:25;;;:::i;:::-;;;;;;;;;;;;;;;;1712:43;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1878:233;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1684:145:13;;;:::i;:::-;;5814:749:0;;;;;;;;;;;;;;;;:::i;:::-;;1508:34;;;:::i;:::-;;;;;;;;;;;;;;;;2820:78;;;:::i;:::-;;899:77:13;;;:::i;:::-;;;;;;;;;;;;;;;;1250:92;;;:::i;:::-;;;;;;;;;;;;;;;;1548:31:0;;;:::i;:::-;;;;;;;;;;;;;;;;1618:33;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;6569:722;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3234:1615;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;2381:433;;;;;;;;;;;;;;;;:::i;:::-;;2904:244;;;;;;;;;;;;;;;;:::i;:::-;;1657:49;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1978:115:13;;;;;;;;;;;;;;;;:::i;:::-;;1436:35:0;;;:::i;:::-;;;;;;;;;;;;;;;;1362:16;;;;;;;;;;;;;:::o;1332:24::-;;;;;;;;;;;;;:::o;4997:811::-;5040:20;5062:23;5097:12;5119:23;5152:29;5282:17;:15;:17::i;:::-;5191:108;;;;;;;;;;;;;;;;;;;;5314:7;5310:492;;;5351:13;5337:11;;:27;;;;;;;;;;;;;;;;;;5400:18;5378:19;:40;;;;5455:22;5432:20;;:45;;;;;;;;;;;;;;;;;;5509:18;5491:15;:36;;;;5560:1;5545:11;;;;;;;;;;;:16;;;5541:98;;;5586:38;5605:18;5586:38;;;;;;;;;;;;;;;5541:98;5656:4;;;;;;;;;;;:13;;;5670:12;:10;:12::i;:::-;5684:66;5752:1;5656:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5656:98:0;;;;;;;;;;;;;;5652:140;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;;5758:34:0;5652:140;;;;5310:492;4997:811;;;;;:::o;2117:258::-;1103:9:13;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2221:1:0::1;2209:8;:13;;;;:31;;;;2239:1;2226:9;:14;;;;2209:31;2205:164;;;2277:25;;;;;;;;2282:8;2277:25;;;;;;2292:9;2277:25;;;;::::0;2256:14:::1;:18;2271:2;2256:18;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2205:164;;;2340:14;:18;2355:2;2340:18;;;;;;;;;;;;2333:25:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2205:164;2117:258:::0;;;:::o;1385:45::-;1429:1;1385:45;:::o;1585:27::-;;;;:::o;1477:25::-;;;;;;;;;;;;;:::o;1712:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1878:233::-;1936:14;1952;1978:38;;:::i;:::-;2019:6;:17;2026:9;2019:17;;;;;;;;;;;;;;;1978:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2054:15;:25;;;2081:15;:22;;;2046:58;;;;;;;;1878:233;;;:::o;1684:145:13:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;1790:1:::1;1753:40;;1774:6;::::0;::::1;;;;;;;;;1753:40;;;;;;;;;;;;1820:1;1803:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1684:145::o:0;5814:749:0:-;5941:1;5903:14;:24;5918:8;5903:24;;;;;;;;;;;:34;;;;;;;;;;;;:39;;;;5895:85;;;;;;;;;;;;;;;;;;;;;;5990:23;6048:17;:15;:17::i;:::-;6023:42;;;;;;6094:1;6079:11;;;;;;;;;;;:16;;;6075:29;;;6097:7;;;6075:29;6133:17;6153:12;:10;:12::i;:::-;6133:32;;6175:4;;;;;;;;;;;:12;;;6188:9;6199:8;6209:9;6175:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6175:44:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6175:44:0;;;;6230:40;6273:6;:17;6280:9;6273:17;;;;;;;;;;;;;;;6230:60;;6334:18;6304:16;:26;;;:48;6300:170;;6375:16;:23;;;6368:30;;;;:::i;:::-;6441:18;6412:16;:26;;:47;;;;6300:170;6479:16;:23;;6508:47;;;;;;;;6514:5;6508:47;;;;;;6521:9;6508:47;;;;;;6532:8;6508:47;;;;6542:12;6508:47;;;6479:77;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;6479:77:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5814:749;;;;;;:::o;1508:34::-;;;;;;;;;;;;;:::o;2820:78::-;1103:9:13;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2881:10:0::1;;2874:17;;;;:::i;:::-;2820:78::o:0;899:77:13:-;937:7;963:6;;;;;;;;;;;956:13;;899:77;:::o;1250:92::-;1290:4;1329:6;;;;;;;;;;;1313:22;;:12;:10;:12::i;:::-;:22;;;1306:29;;1250:92;:::o;1548:31:0:-;;;;:::o;1618:33::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6569:722::-;6630:4;6646:20;6676:23;6747:17;:15;:17::i;:::-;6709:55;;;;;;;;6795:1;6778:13;:18;;;6774:32;;;6805:1;6798:8;;;;;;6774:32;6836:17;6856:12;:10;:12::i;:::-;6836:32;;6878:40;6921:6;:17;6928:9;6921:17;;;;;;;;;;;;;;;6878:60;;6986:18;6956:16;:26;;;:48;6948:76;;;;;;;;;;;;;;;;;;;;;;7034:22;7059:1;7034:26;;7075:6;7084;7075:15;;7070:181;7105:5;7096:6;:14;7092:1;:18;7070:181;;;7151:89;7173:66;7186:16;:23;;7210:1;7186:26;;;;;;;;;;;;;;;;;;7214:13;7229:9;7173:12;:66::i;:::-;7151:17;:21;;:89;;;;:::i;:::-;7131:109;;7112:3;;;;;;;7070:181;;;;7267:17;7260:24;;;;;;;6569:722;;;;;:::o;3234:1615::-;3305:4;3311:15;3328:18;3348:28;3378:24;3430:15;;3414:31;;3466:1;3455:12;;3503:1;3477:27;;3534:1;3514:21;;3569:13;3554:12;:28;3546:73;;;;;;;;;;;;;;;;;;;;;;3654:12;3648:3;3632:13;:19;:34;3629:233;;;3753:2;3738:12;:17;3722:33;;3777:4;3783:8;3793:13;3808:23;3833:17;3769:82;;;;;;;;;;;;3629:233;3883:11;;;;;;;;;;;3872:22;;3920:1;3908:8;:13;;;3904:126;;3945:5;3952:8;3962:13;3977:19;;3998:20;;;;;;;;;;;3937:82;;;;;;;;;;;;3904:126;4040:19;4062:10;:17;;;;4040:39;;4089:14;4116:13;4106:24;4089:41;;4140:21;4196:1;4186:6;4176;4171:12;;:21;;;;;;4164:33;4140:57;;4207:544;4225:1;4213:8;:13;;;4207:544;;;4242:30;;:::i;:::-;4275:10;4309:14;4299:6;4294:12;;:29;;;;;;4275:51;;;;;;;;;;;;;;;;;4242:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4363:1;4344:9;:16;;;:20;;;:58;;;;;4388:14;4368:34;;:9;:16;;;:34;;;;4344:58;4340:401;;;4433:9;:14;;;4422:25;;4491:9;:23;;;4465:49;;;;4552:8;;;;;;;;;;;:18;;;4571:8;4552:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4552:28:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4552:28:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4552:28:0;;;;;;;;;:38;;;4532:58;;;;4340:401;;;4663:1;4646:14;:18;;;;;;;;4629:35;;4718:6;4701:24;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4701:24:0;;;4691:35;;;;;;4682:44;;4340:401;4207:544;;;;4768:4;4774:8;4784:13;4799:23;4824:17;4760:82;;;;;;;;;;;;;3234:1615;;;;;;:::o;2381:433::-;1103:9:13;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2463:6:0::1;2472:1:::0;2463:10:::1;;2458:350;2479:11;:18;2475:1;:22;2458:350;;;2518:12;2533:11;2545:1;2533:14;;;;;;;;;;;;;;2518:29;;2561:10;2594:189;;;;;;;;2647:2;2636:7;:13;;2594:189;;;;;;2698:2;2687:7;:13;;2594:189;;;;;;2740:7;2594:189;;;;::::0;2561:236:::1;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;2561:236:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2458:350;2499:3;;;;;;;2458:350;;;;2381:433:::0;:::o;2904:244::-;1103:9:13;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2968:19:0::1;2990:10;:17;;;;2968:39;;3033:14;3025:5;:22;3017:38;;;;;;;;;;;;;;;;;;;;;;3098:10;3109:5;3098:17;;;;;;;;;;;;;;;3065:10;3093:1;3076:14;:18;3065:30;;;;;;;;;;;;;;;:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3125:10;:16;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1159:1:13;2904:244:0::0;:::o;1657:49::-;;;;;;;;;;;;;;;;;;;;;;:::o;1978:115:13:-;1103:9;:7;:9::i;:::-;1095:54;;;;;;;;;;;;;;;;;;;;;;2058:28:::1;2077:8;2058:18;:28::i;:::-;1978:115:::0;:::o;1436:35:0:-;1469:2;1436:35;:::o;735:104:12:-;788:15;822:10;815:17;;735:104;:::o;7418:1424:0:-;7528:4;7548:14;:24;;;;;;;;;;;;7544:38;;;7581:1;7574:8;;;;7544:38;7592:16;7611:51;1429:1;7611:14;:25;;;:29;;:51;;;;:::i;:::-;7592:70;;7691:12;7676:11;:27;7672:41;;7712:1;7705:8;;;;;7672:41;7750:4;7723:14;:24;;;:31;;;;;;;;;;;;;;;;;;7764:19;7786;;7764:41;;7837:1;7819:14;:19;7815:33;;;7847:1;7840:8;;;;;;7815:33;7858:18;7879:14;:24;;;;;;;;;;;;7858:45;;;;7913:21;7937:1;7913:25;;7948:16;;:::i;:::-;7967:14;:39;7982:14;:23;;;7967:39;;;;;;;;;;;7948:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8016:14;8043:11;8033:22;8016:39;;8070:6;8079:1;8070:10;;8065:479;8086:13;8082:1;:17;8065:479;;;8138:3;8128:13;;:6;:13;;8120:31;;;;;;;;;;;;;;;;;;;;;;8174:18;8185:6;8174:10;:18::i;:::-;8165:27;;8206:20;8287:4;:13;;;8269:4;:13;;;8252:4;:14;;;:30;8236:47;;8241:6;8236:12;;:47;;;;;;8229:71;8206:94;;8334:20;;;;;;;;;;;8318:36;;:13;:36;;;8314:161;;;8374:18;;;;;;;8410:8;;;;;;;;;;;:16;;;8427:9;8438:13;8453:6;8410:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8410:50:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8410:50:0;;;;8314:161;8512:14;8492:16;:34;8488:45;;8528:5;;;8488:45;8065:479;8101:3;;;;;;;8065:479;;;;8592:16;8575:14;:33;8553:19;:55;;;;8640:16;8622:14;:34;8618:185;;;8725:38;8760:2;8745:12;:17;8725:19;:38::i;:::-;8707:15;:56;;;;8791:1;8777:11;;:15;;;;;;;;;;;;;;;;;;8618:185;8819:16;8812:23;;;;;;;;7418:1424;;;;;;:::o;834:176:10:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;2194:233:13:-;2295:1;2275:22;;:8;:22;;;;2267:73;;;;;;;;;;;;;;;;;;;;;;2384:8;2355:38;;2376:6;;;;;;;;;;;2355:38;;;;;;;;;;;;2412:8;2403:6;;:17;;;;;;;;;;;;;;;;;;2194:233;:::o;7297:115:0:-;7350:7;7397:6;7386:18;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7386:18:0;;;7376:29;;;;;;7369:36;;7297:115;;;:::o;4855:136::-;4913:4;4951:6;4933:15;:24;;;;4978:6;4971:13;;4855:136;;;:::o;808:8036::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;160:707;;277:3;270:4;262:6;258:17;254:27;244:2;;295:1;292;285:12;244:2;332:6;319:20;354:80;369:64;426:6;369:64;;;354:80;;;345:89;;451:5;476:6;469:5;462:21;506:4;498:6;494:17;484:27;;528:4;523:3;519:14;512:21;;581:6;628:3;620:4;612:6;608:17;603:3;599:27;596:36;593:2;;;645:1;642;635:12;593:2;670:1;655:206;680:6;677:1;674:13;655:206;;;738:3;760:37;793:3;781:10;760:37;;;755:3;748:50;821:4;816:3;812:14;805:21;;849:4;844:3;840:14;833:21;;712:149;702:1;699;695:9;690:14;;655:206;;;659:14;237:630;;;;;;;;913:1314;;1042:4;1030:9;1025:3;1021:19;1017:30;1014:2;;;1060:1;1057;1050:12;1014:2;1078:20;1093:4;1078:20;;;1069:29;;1151:1;1183:59;1238:3;1229:6;1218:9;1214:22;1183:59;;;1176:4;1169:5;1165:16;1158:85;1108:146;1312:2;1345:58;1399:3;1390:6;1379:9;1375:22;1345:58;;;1338:4;1331:5;1327:16;1320:84;1264:151;1473:2;1506:58;1560:3;1551:6;1540:9;1536:22;1506:58;;;1499:4;1492:5;1488:16;1481:84;1425:151;1633:2;1666:58;1720:3;1711:6;1700:9;1696:22;1666:58;;;1659:4;1652:5;1648:16;1641:84;1586:150;1791:3;1825:58;1879:3;1870:6;1859:9;1855:22;1825:58;;;1818:4;1811:5;1807:16;1800:84;1746:149;1951:3;1985:59;2040:3;2031:6;2020:9;2016:22;1985:59;;;1978:4;1971:5;1967:16;1960:85;1905:151;2112:3;2146:59;2201:3;2192:6;2181:9;2177:22;2146:59;;;2139:4;2132:5;2128:16;2121:85;2066:151;1008:1219;;;;;2234:128;;2313:6;2300:20;2291:29;;2325:32;2351:5;2325:32;;;2285:77;;;;;2369:132;;2452:6;2446:13;2437:22;;2464:32;2490:5;2464:32;;;2431:70;;;;;2508:130;;2588:6;2575:20;2566:29;;2600:33;2627:5;2600:33;;;2560:78;;;;;2645:132;;2728:6;2722:13;2713:22;;2740:32;2766:5;2740:32;;;2707:70;;;;;2784:130;;2866:6;2860:13;2851:22;;2878:31;2903:5;2878:31;;;2845:69;;;;;2921:241;;3025:2;3013:9;3004:7;3000:23;2996:32;2993:2;;;3041:1;3038;3031:12;2993:2;3076:1;3093:53;3138:7;3129:6;3118:9;3114:22;3093:53;;;3083:63;;3055:97;2987:175;;;;;3169:377;;3298:2;3286:9;3277:7;3273:23;3269:32;3266:2;;;3314:1;3311;3304:12;3266:2;3377:1;3366:9;3362:17;3349:31;3400:18;3392:6;3389:30;3386:2;;;3432:1;3429;3422:12;3386:2;3452:78;3522:7;3513:6;3502:9;3498:22;3452:78;;;3442:88;;3328:208;3260:286;;;;;3553:322;;3697:3;3685:9;3676:7;3672:23;3668:33;3665:2;;;3714:1;3711;3704:12;3665:2;3749:1;3766:93;3851:7;3842:6;3831:9;3827:22;3766:93;;;3756:103;;3728:137;3659:216;;;;;3882:364;;;4002:2;3990:9;3981:7;3977:23;3973:32;3970:2;;;4018:1;4015;4008:12;3970:2;4053:1;4070:52;4114:7;4105:6;4094:9;4090:22;4070:52;;;4060:62;;4032:96;4159:2;4177:53;4222:7;4213:6;4202:9;4198:22;4177:53;;;4167:63;;4138:98;3964:282;;;;;;4253:241;;4357:2;4345:9;4336:7;4332:23;4328:32;4325:2;;;4373:1;4370;4363:12;4325:2;4408:1;4425:53;4470:7;4461:6;4450:9;4446:22;4425:53;;;4415:63;;4387:97;4319:175;;;;;4501:487;;;;4637:2;4625:9;4616:7;4612:23;4608:32;4605:2;;;4653:1;4650;4643:12;4605:2;4688:1;4705:53;4750:7;4741:6;4730:9;4726:22;4705:53;;;4695:63;;4667:97;4795:2;4813:52;4857:7;4848:6;4837:9;4833:22;4813:52;;;4803:62;;4774:97;4902:2;4920:52;4964:7;4955:6;4944:9;4940:22;4920:52;;;4910:62;;4881:97;4599:389;;;;;;4995:366;;;5116:2;5104:9;5095:7;5091:23;5087:32;5084:2;;;5132:1;5129;5122:12;5084:2;5167:1;5184:53;5229:7;5220:6;5209:9;5205:22;5184:53;;;5174:63;;5146:97;5274:2;5292:53;5337:7;5328:6;5317:9;5313:22;5292:53;;;5282:63;;5253:98;5078:283;;;;;;5369:245;;5490:84;5570:3;5562:6;5490:84;;;5603:4;5598:3;5594:14;5580:28;;5483:131;;;;;5622:142;5713:45;5752:5;5713:45;;;5708:3;5701:58;5695:69;;;5771:113;5854:24;5872:5;5854:24;;;5849:3;5842:37;5836:48;;;5954:826;;6133:71;6198:5;6133:71;;;6217:103;6313:6;6308:3;6217:103;;;6210:110;;6341:73;6408:5;6341:73;;;6434:7;6462:1;6447:311;6472:6;6469:1;6466:13;6447:311;;;6539:6;6533:13;6560:97;6653:3;6638:13;6560:97;;;6553:104;;6674:77;6744:6;6674:77;;;6664:87;;6504:254;6494:1;6491;6487:9;6482:14;;6447:311;;;6451:14;6771:3;6764:10;;6112:668;;;;;;;;6788:94;6855:21;6870:5;6855:21;;;6850:3;6843:34;6837:45;;;6889:104;6966:21;6981:5;6966:21;;;6961:3;6954:34;6948:45;;;7000:113;7083:24;7101:5;7083:24;;;7078:3;7071:37;7065:48;;;7120:152;7221:45;7241:24;7259:5;7241:24;;;7221:45;;;7216:3;7209:58;7203:69;;;7279:160;7379:54;7427:5;7379:54;;;7374:3;7367:67;7361:78;;;7446:152;7542:50;7586:5;7542:50;;;7537:3;7530:63;7524:74;;;7605:142;7696:45;7735:5;7696:45;;;7691:3;7684:58;7678:69;;;7754:294;7921:121;8036:5;7921:121;;;7916:3;7909:134;7903:145;;;8056:315;;8216:67;8280:2;8275:3;8216:67;;;8209:74;;8316:17;8312:1;8307:3;8303:11;8296:38;8362:2;8357:3;8353:12;8346:19;;8202:169;;;;8380:332;;8540:67;8604:2;8599:3;8540:67;;;8533:74;;8640:34;8636:1;8631:3;8627:11;8620:55;8703:2;8698:3;8694:12;8687:19;;8526:186;;;;8721:375;;8881:67;8945:2;8940:3;8881:67;;;8874:74;;8981:34;8977:1;8972:3;8968:11;8961:55;9050:8;9045:2;9040:3;9036:12;9029:30;9087:2;9082:3;9078:12;9071:19;;8867:229;;;;9105:302;;9265:66;9329:1;9324:3;9265:66;;;9258:73;;9364:5;9360:1;9355:3;9351:11;9344:26;9398:2;9393:3;9389:12;9382:19;;9251:156;;;;9416:327;;9576:67;9640:2;9635:3;9576:67;;;9569:74;;9676:29;9672:1;9667:3;9663:11;9656:50;9734:2;9729:3;9725:12;9718:19;;9562:181;;;;9752:304;;9912:66;9976:1;9971:3;9912:66;;;9905:73;;10011:7;10007:1;10002:3;9998:11;9991:28;10047:2;10042:3;10038:12;10031:19;;9898:158;;;;10065:370;;10225:67;10289:2;10284:3;10225:67;;;10218:74;;10325:34;10321:1;10316:3;10312:11;10305:55;10394:3;10389:2;10384:3;10380:12;10373:25;10426:2;10421:3;10417:12;10410:19;;10211:224;;;;10444:332;;10604:67;10668:2;10663:3;10604:67;;;10597:74;;10704:34;10700:1;10695:3;10691:11;10684:55;10767:2;10762:3;10758:12;10751:19;;10590:186;;;;10841:774;10962:4;10957:3;10953:14;11050:4;11043:5;11039:16;11033:23;11062:57;11113:4;11108:3;11104:14;11090:12;11062:57;;;10982:143;11203:4;11196:5;11192:16;11186:23;11215:61;11270:4;11265:3;11261:14;11247:12;11215:61;;;11135:147;11359:4;11352:5;11348:16;11342:23;11371:63;11428:4;11423:3;11419:14;11405:12;11371:63;;;11292:148;11519:4;11512:5;11508:16;11502:23;11531:63;11588:4;11583:3;11579:14;11565:12;11531:63;;;11450:150;10935:680;;;;11622:100;11693:23;11710:5;11693:23;;;11688:3;11681:36;11675:47;;;11729:110;11810:23;11827:5;11810:23;;;11805:3;11798:36;11792:47;;;11846:124;11928:36;11958:5;11928:36;;;11923:3;11916:49;11910:60;;;11977:103;12050:24;12068:5;12050:24;;;12045:3;12038:37;12032:48;;;12087:113;12170:24;12188:5;12170:24;;;12165:3;12158:37;12152:48;;;12207:244;;12326:75;12397:3;12388:6;12326:75;;;12423:2;12418:3;12414:12;12407:19;;12443:3;12436:10;;12314:137;;;;;12458:213;;12576:2;12565:9;12561:18;12553:26;;12590:71;12658:1;12647:9;12643:17;12634:6;12590:71;;;12547:124;;;;;12678:635;;12952:2;12941:9;12937:18;12929:26;;12966:79;13042:1;13031:9;13027:17;13018:6;12966:79;;;13056:156;13208:2;13197:9;13193:18;13184:6;13056:156;;;13223:80;13299:2;13288:9;13284:18;13275:6;13223:80;;;12923:390;;;;;;;13320:431;;13492:2;13481:9;13477:18;13469:26;;13506:71;13574:1;13563:9;13559:17;13550:6;13506:71;;;13588:70;13654:2;13643:9;13639:18;13630:6;13588:70;;;13669:72;13737:2;13726:9;13722:18;13713:6;13669:72;;;13463:288;;;;;;;13758:433;;13931:2;13920:9;13916:18;13908:26;;13945:71;14013:1;14002:9;13998:17;13989:6;13945:71;;;14027:72;14095:2;14084:9;14080:18;14071:6;14027:72;;;14110:71;14177:2;14166:9;14162:18;14153:6;14110:71;;;13902:289;;;;;;;14198:201;;14310:2;14299:9;14295:18;14287:26;;14324:65;14386:1;14375:9;14371:17;14362:6;14324:65;;;14281:118;;;;;14406:639;;14626:3;14615:9;14611:19;14603:27;;14641:65;14703:1;14692:9;14688:17;14679:6;14641:65;;;14717:70;14783:2;14772:9;14768:18;14759:6;14717:70;;;14798:72;14866:2;14855:9;14851:18;14842:6;14798:72;;;14881;14949:2;14938:9;14934:18;14925:6;14881:72;;;14964:71;15030:3;15019:9;15015:19;15006:6;14964:71;;;14597:448;;;;;;;;;15052:213;;15170:2;15159:9;15155:18;15147:26;;15184:71;15252:1;15241:9;15237:17;15228:6;15184:71;;;15141:124;;;;;15272:247;;15407:2;15396:9;15392:18;15384:26;;15421:88;15506:1;15495:9;15491:17;15482:6;15421:88;;;15378:141;;;;;15526:239;;15657:2;15646:9;15642:18;15634:26;;15671:84;15752:1;15741:9;15737:17;15728:6;15671:84;;;15628:137;;;;;15772:407;;15963:2;15952:9;15948:18;15940:26;;16013:9;16007:4;16003:20;15999:1;15988:9;15984:17;15977:47;16038:131;16164:4;16038:131;;;16030:139;;15934:245;;;;16186:407;;16377:2;16366:9;16362:18;16354:26;;16427:9;16421:4;16417:20;16413:1;16402:9;16398:17;16391:47;16452:131;16578:4;16452:131;;;16444:139;;16348:245;;;;16600:407;;16791:2;16780:9;16776:18;16768:26;;16841:9;16835:4;16831:20;16827:1;16816:9;16812:17;16805:47;16866:131;16992:4;16866:131;;;16858:139;;16762:245;;;;17014:407;;17205:2;17194:9;17190:18;17182:26;;17255:9;17249:4;17245:20;17241:1;17230:9;17226:17;17219:47;17280:131;17406:4;17280:131;;;17272:139;;17176:245;;;;17428:407;;17619:2;17608:9;17604:18;17596:26;;17669:9;17663:4;17659:20;17655:1;17644:9;17640:17;17633:47;17694:131;17820:4;17694:131;;;17686:139;;17590:245;;;;17842:407;;18033:2;18022:9;18018:18;18010:26;;18083:9;18077:4;18073:20;18069:1;18058:9;18054:17;18047:47;18108:131;18234:4;18108:131;;;18100:139;;18004:245;;;;18256:407;;18447:2;18436:9;18432:18;18424:26;;18497:9;18491:4;18487:20;18483:1;18472:9;18468:17;18461:47;18522:131;18648:4;18522:131;;;18514:139;;18418:245;;;;18670:407;;18861:2;18850:9;18846:18;18838:26;;18911:9;18905:4;18901:20;18897:1;18886:9;18882:17;18875:47;18936:131;19062:4;18936:131;;;18928:139;;18832:245;;;;19084:209;;19200:2;19189:9;19185:18;19177:26;;19214:69;19280:1;19269:9;19265:17;19256:6;19214:69;;;19171:122;;;;;19300:316;;19442:2;19431:9;19427:18;19419:26;;19456:69;19522:1;19511:9;19507:17;19498:6;19456:69;;;19536:70;19602:2;19591:9;19587:18;19578:6;19536:70;;;19413:203;;;;;;19623:423;;19791:2;19780:9;19776:18;19768:26;;19805:69;19871:1;19860:9;19856:17;19847:6;19805:69;;;19885:70;19951:2;19940:9;19936:18;19927:6;19885:70;;;19966;20032:2;20021:9;20017:18;20008:6;19966:70;;;19762:284;;;;;;;20053:320;;20197:2;20186:9;20182:18;20174:26;;20211:69;20277:1;20266:9;20262:17;20253:6;20211:69;;;20291:72;20359:2;20348:9;20344:18;20335:6;20291:72;;;20168:205;;;;;;20380:213;;20498:2;20487:9;20483:18;20475:26;;20512:71;20580:1;20569:9;20565:17;20556:6;20512:71;;;20469:124;;;;;20600:540;;20830:2;20819:9;20815:18;20807:26;;20844:71;20912:1;20901:9;20897:17;20888:6;20844:71;;;20963:9;20957:4;20953:20;20948:2;20937:9;20933:18;20926:48;20988:142;21125:4;21116:6;20988:142;;;20980:150;;20801:339;;;;;;21147:256;;21209:2;21203:9;21193:19;;21247:4;21239:6;21235:17;21346:6;21334:10;21331:22;21310:18;21298:10;21295:34;21292:62;21289:2;;;21367:1;21364;21357:12;21289:2;21387:10;21383:2;21376:22;21187:216;;;;;21410:304;;21569:18;21561:6;21558:30;21555:2;;;21601:1;21598;21591:12;21555:2;21636:4;21628:6;21624:17;21616:25;;21699:4;21693;21689:15;21681:23;;21492:222;;;;21721:168;;21824:3;21816:11;;21862:4;21857:3;21853:14;21845:22;;21810:79;;;;21896:154;;22022:5;22016:12;22006:22;;21987:63;;;;22057:125;;22172:4;22167:3;22163:14;22155:22;;22149:33;;;;22190:195;;22337:6;22332:3;22325:19;22374:4;22369:3;22365:14;22350:29;;22318:67;;;;;22394:163;;22509:6;22504:3;22497:19;22546:4;22541:3;22537:14;22522:29;;22490:67;;;;;22565:91;;22627:24;22645:5;22627:24;;;22616:35;;22610:46;;;;22663:85;;22736:5;22729:13;22722:21;22711:32;;22705:43;;;;22755:72;;22817:5;22806:16;;22800:27;;;;22834:84;;22906:6;22899:5;22895:18;22884:29;;22878:40;;;;22925:121;;22998:42;22991:5;22987:54;22976:65;;22970:76;;;;23053:72;;23115:5;23104:16;;23098:27;;;;23132:96;;23204:18;23197:5;23193:30;23182:41;;23176:52;;;;23235:81;;23306:4;23299:5;23295:16;23284:27;;23278:38;;;;23323:129;;23410:37;23441:5;23410:37;;;23397:50;;23391:61;;;;23459:155;;23555:54;23603:5;23555:54;;;23542:67;;23536:78;;;;23621:125;;23717:24;23735:5;23717:24;;;23704:37;;23698:48;;;;23753:147;;23845:50;23889:5;23845:50;;;23832:63;;23826:74;;;;23907:121;;23999:24;24017:5;23999:24;;;23986:37;;23980:48;;;;24035:116;;24122:24;24140:5;24122:24;;;24109:37;;24103:48;;;;24158:192;;24321:24;24339:5;24321:24;;;24308:37;;24302:48;;;;24357:121;;24436:37;24467:5;24436:37;;;24423:50;;24417:61;;;;24485:108;;24564:24;24582:5;24564:24;;;24551:37;;24545:48;;;;24600:106;;24678:23;24695:5;24678:23;;;24665:36;;24659:47;;;;24713:74;;24777:5;24766:16;;24760:27;;;;24794:117;24863:24;24881:5;24863:24;;;24856:5;24853:35;24843:2;;24902:1;24899;24892:12;24843:2;24837:74;;24918:115;24986:23;25003:5;24986:23;;;24979:5;24976:34;24966:2;;25024:1;25021;25014:12;24966:2;24960:73;;25040:117;25109:24;25127:5;25109:24;;;25102:5;25099:35;25089:2;;25148:1;25145;25138:12;25089:2;25083:74;;25164:115;25232:23;25249:5;25232:23;;;25225:5;25222:34;25212:2;;25270:1;25267;25260:12;25212:2;25206:73;;25286:113;25353:22;25369:5;25353:22;;;25346:5;25343:33;25333:2;;25390:1;25387;25380:12;25333:2;25327:72;","source":"pragma solidity >=0.4.21 <0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./erc1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\n\ninterface CatchTypes {\n    struct CatchableBase {\n        uint16 upgrade;\n        uint8 upgradeLevel;\n        uint8 xpLevelRatio;\n        uint8 genderRatio;\n        uint8 catchRate;\n\n        uint16 categories;\n\n        // Attributes (vita, speed, attack, defense, xAttack, xDefense, ...)\n        uint64 attributes;\n    }\n\n    struct CatchableProps {\n        uint16 base;\n        uint8 level;\n        uint24 xp;\n        uint16 hpPercent;\n\n        uint8 gender;\n        uint16 appearance;\n\n        // Attribute diffs (vita, speed, attack, defense, xAttack, xDefense, ...)\n        uint64 diffs;\n    }\n}\n\n// Should use CatchDex to generate new catchables\ncontract Wilderniss is CatchTypes, Ownable {\n\n    using SafeMath for uint256;\n\n    event NextCatchableBlock(uint blockNumber);\n\n    struct ZoneCatchable {\n        uint16 kind;\n        uint16 rarity;\n        uint16 maxCatchCount;\n    }\n\n    struct Throw {\n        bool collected;\n        uint16 cageCount;\n        uint cageType;\n        uint throwBlock;\n    }\n\n    struct ThrowCollection {\n        uint kindBlock;\n        Throw[] throws;\n    }\n\n    struct Cage {\n        uint16 bestRate;\n        uint16 worstRate;\n    }\n\n    CatchDex public catchDex;\n    Shop public shop;\n\n    uint public constant CAGE_COOLDOWN_BLOCKS = 2;\n    uint public constant MAX_TRIES = 10;\n    uint16 public currentKind;\n    uint16 public currentKindCatchRate;\n    uint public availableCatchables;\n    uint public kindBlockNumber;\n    ZoneCatchable[] public catchables;\n    mapping(address => ThrowCollection) public throws;\n    mapping(uint => Cage) public cageProperties;\n\n    constructor(CatchDex _catchDex, Shop _shop) public {\n        catchDex = _catchDex;\n        shop = _shop;\n    }\n\n    function getThrows(address collector) public view returns(uint kindBlock, Throw[] memory) {\n        ThrowCollection memory collectorThrows = throws[collector];\n        return (collectorThrows.kindBlock, collectorThrows.throws);\n    }\n\n    function setCage(uint id, uint16 bestRate, uint16 worstRate) public onlyOwner {\n        if (bestRate != 0 || worstRate != 0) {\n            cageProperties[id] = Cage(bestRate, worstRate);\n        } else {\n            delete cageProperties[id];\n        }\n    }\n\n    function addCatchables(uint[] memory _catchables) public onlyOwner {\n        for (uint i = 0; i < _catchables.length; i++) {\n            uint encoded = _catchables[i];\n            catchables.push(\n                ZoneCatchable(\n                    uint16(encoded >> 32), // kind\n                    uint16(encoded >> 16), // rarity\n                    uint16(encoded) // maxCatchCount\n                )\n            );\n        }\n    }\n\n    function clearCatchables() public onlyOwner {\n        delete catchables;\n    }\n\n    function removeCatchable(uint index) public onlyOwner {\n        uint catchableCount = catchables.length;\n        require(index < catchableCount, \"OOB\");\n        catchables[catchableCount - 1] = catchables[index];\n        catchables.pop();\n    }\n\n    /*\n     * Boolean returned indicates if new data has been generated\n     */\n    function calcCurrentKind()\n        public\n        view\n        returns(bool, uint16 calcKind, uint calcKindBlock, uint calcAvailableCatchables, uint16 calcKindCatchRate) {\n        calcKindBlock = kindBlockNumber;\n        calcKind = 0;\n        calcAvailableCatchables = 0;\n        calcKindCatchRate = 0;\n\n        require(block.number > calcKindBlock, \"The catchable did not appear yet\");\n        if(calcKindBlock + 255 < block.number) {\n            // \"The catchable run away\"\n            calcKindBlock = block.number + 42;\n            return (true, calcKind, calcKindBlock, calcAvailableCatchables, calcKindCatchRate);\n        }\n\n        calcKind = currentKind;\n        if (calcKind != 0) {\n            return (false, calcKind, calcKindBlock, availableCatchables, currentKindCatchRate);\n        }\n\n        uint catchableCount = catchables.length;\n        bytes32 random = blockhash(calcKindBlock);\n        uint16 expectedRarity = uint16(uint(random) % 0xfffe) + 1;\n        while(calcKind == 0) {\n            ZoneCatchable memory catchable = catchables[(uint16(uint(random) % catchableCount))];\n            if (catchable.rarity > 0 && catchable.rarity >= expectedRarity) {\n                calcKind = catchable.kind;\n                calcAvailableCatchables = catchable.maxCatchCount;\n                calcKindCatchRate = catchDex.baseProps(calcKind).catchRate;\n            } else {\n                expectedRarity = expectedRarity / 2;\n                random = keccak256(abi.encodePacked(random));\n            }\n        }\n        return (true, calcKind, calcKindBlock, calcAvailableCatchables, calcKindCatchRate);\n    }\n\n    function setCurrentKindBlock(uint number) private returns(uint) {\n            kindBlockNumber = number;\n            return number;\n    }\n\n    function currentKindInfo() public returns (uint16 availableKind, uint availableKindBlock) {\n        bool newData;\n        uint availableKindCount;\n        uint16 availableKindCatchRate;\n        (newData, availableKind, availableKindBlock, availableKindCount, availableKindCatchRate) = calcCurrentKind();\n\n        if (newData) {\n            currentKind = availableKind;\n            availableCatchables = availableKindCount;\n            currentKindCatchRate = availableKindCatchRate;\n            kindBlockNumber = availableKindBlock;\n            if (currentKind == 0) {\n                emit NextCatchableBlock(availableKindBlock);\n            }\n            try shop.findItem(_msgSender(), 0x8096053b85575944c326764cc6482f6906db772a41aa99f7533f62dcadddf72b, 1) {} catch (bytes memory errorBytes) {}\n        }\n    }\n\n    function aWildCatchableAppears(uint16 cageCount, uint cageType) public {\n        require(cageProperties[cageType].worstRate != 0, \"I don't know what to do with this\");\n        uint availableKindBlock;\n        (, availableKindBlock) = currentKindInfo();\n        if (currentKind == 0) return; // Nothing appeared\n        address collector = _msgSender();\n        shop.useItem(collector, cageType, cageCount);\n\n        ThrowCollection storage collectorsThrows = throws[collector];\n        if (collectorsThrows.kindBlock != availableKindBlock) {\n            delete collectorsThrows.throws;\n            collectorsThrows.kindBlock = availableKindBlock;\n        }\n        collectorsThrows.throws.push(Throw(false, cageCount, cageType, block.number));\n    }\n\n    function checkCages(uint offset, uint count) public returns (uint) {\n        uint16 availableKind;\n        uint availableKindBlock;\n        (availableKind, availableKindBlock) = currentKindInfo();\n        if (availableKind == 0) return 0; // Nothing appeared\n        address collector = _msgSender();\n        ThrowCollection storage collectorsThrows = throws[collector];\n        require(collectorsThrows.kindBlock == availableKindBlock, \"No active cages\");\n        uint successfullThrows = 0;\n        for (uint i = offset; i < offset + count; i++) {\n            successfullThrows = successfullThrows.add(processThrow(collectorsThrows.throws[i], availableKind, collector));\n        }\n        return successfullThrows;\n    }\n\n    function nextRandom(bytes32 random) private returns (bytes32) {\n        return keccak256(abi.encode(random));\n    }\n\n    function processThrow(Throw storage collectorThrow, uint16 availableKind, address collector) private returns (uint) {\n        if (collectorThrow.collected) return 0;\n        uint targetBlock = collectorThrow.throwBlock.add(CAGE_COOLDOWN_BLOCKS);\n        if (targetBlock >= block.number) return 0;\n        collectorThrow.collected = true;\n        uint possibleThrows = availableCatchables;\n        if (possibleThrows == 0) return 0;\n        uint plannedThrows = collectorThrow.cageCount;\n        uint successfulThrows = 0;\n        Cage memory cage = cageProperties[collectorThrow.cageType];\n        bytes32 random = blockhash(targetBlock);\n        for (uint i = 0; i < plannedThrows; i++) {\n            require(random != 0x0, \"Upps!\");\n            random = nextRandom(random);\n            uint16 cageCatchRate = uint16(uint(random) % (cage.worstRate - cage.bestRate)) + cage.bestRate;\n            if (cageCatchRate < currentKindCatchRate) {\n                successfulThrows++;\n                catchDex.catchIt(collector, availableKind, random);\n            }\n            if (successfulThrows >= possibleThrows) break;\n        }\n        availableCatchables = possibleThrows - successfulThrows;\n        if (possibleThrows == successfulThrows) {\n            // TODO extract method\n            kindBlockNumber = setCurrentKindBlock(block.number + 42);\n            currentKind = 0;\n        }\n        return successfulThrows;\n    }\n}\n\n// This is a semi-NFT for our items\ncontract Shop is ERC1155, Ownable {\n\n    uint public constant CURRENCY_ID = 0;\n    uint public itemCount = 1; // We always have at least the currency\n    mapping(address => bool) public printers;\n    mapping(address => bool) public consumers;\n    mapping(address => bool) public treasuries;\n    mapping(uint => uint) public prices;\n\n    function setPrinter(address printer, bool enabled) public onlyOwner {\n        printers[printer] = enabled;\n    }\n\n    function setConsumer(address consumer, bool enabled) public onlyOwner {\n        consumers[consumer] = enabled;\n    }\n\n    function setTreasury(address treasury, bool enabled) public onlyOwner {\n        treasuries[treasury] = enabled;\n    }\n\n    function setPrice(uint id, uint price) public onlyOwner {\n        prices[id] = price;\n    }\n\n    function printMoney(address benefactor, uint amount) public {\n        require(printers[_msgSender()], \"Only printers can print money\");\n        _mint(benefactor, CURRENCY_ID, amount, \"\");\n    }\n\n    function buyItem(uint id, uint amount) public {\n        uint itemPrice = prices[id];\n        require(itemPrice != 0, \"Item is not available\");\n        uint totalPrice = itemPrice.mul(amount);\n        address customer = _msgSender();\n        _burn(customer, CURRENCY_ID, totalPrice);\n        _mint(customer, id, amount, \"\");\n    }\n\n    function sellItem(uint id, uint amount) public {\n        uint itemPrice = prices[id];\n        require(itemPrice != 0, \"Item is not available\");\n        uint totalPrice = itemPrice.mul(amount) / 2;\n        address customer = _msgSender();\n        _burn(customer, id, amount);\n        _mint(customer, CURRENCY_ID, totalPrice, \"\");\n    }\n\n    function useItem(address owner, uint id, uint amount) public {\n        require(consumers[_msgSender()], \"This isn't the time to use that!\");\n        _burn(owner, id, amount);\n    }\n\n    function findItem(address finder, uint id, uint amount) public {\n        require(treasuries[_msgSender()], \"You find items in treasuries\");\n        require(id != CURRENCY_ID, \"You do not just find money\");\n        _mint(finder, id, amount, \"\");\n    }\n}\n\ncontract SomeonesPc is Ownable, CatchTypes {\n    uint8 public constant DIFF_RANGE = 31;\n\n    CatchDex public dex;\n    mapping(uint16 => CatchableBase) public baseProperties;\n    mapping(uint => CatchableProps) public catchableProperties;\n    mapping(address => bool) public upgraders;\n\n    constructor(CatchDex _dex) public {\n        dex = _dex;\n    }\n\n\n    function setUpgrader(address upgrader, bool enabled) public onlyOwner {\n        upgraders[upgrader] = enabled;\n    }\n\n\n    function batchedAddBaseProperty(uint[] memory props) public onlyOwner {\n        for (uint i = 0; i < props.length; i++) {\n            uint encoded = props[i];\n            setBaseProperty(\n                uint16(encoded >> 128), // index\n                CatchableBase(\n                    uint16(encoded >> 112), // upgradeLevel\n                    uint8(encoded >> 104), // upgradeLevel\n                    uint8(encoded >> 96), // xpLevelRatio\n                    uint8(encoded >> 88), // genderRatio\n                    uint8(encoded >> 80), // catchRate\n                    uint16(encoded >> 64), // categories\n                    uint64(encoded) // attributes\n                )\n            );\n        }\n    }\n\n    function setBaseProperty(uint16 index, CatchableBase memory _base) public onlyOwner {\n        baseProperties[index] = _base;\n    }\n\n    function baseProps(uint16 _type) public view returns (CatchableBase memory) {\n        return baseProperties[_type];\n    }\n\n    function nextRandom(bytes32 random) private view returns (bytes32) {\n        return keccak256(abi.encode(random));\n    }\n\n    // TODO evolving\n    function upgradeCatch(uint _id, uint16 _kind) public {\n        require(upgraders[_msgSender()], \"Tell me your tale of failure again.\");\n        CatchableProps storage props = catchableProperties[_id];\n        props.base = _kind;\n    }\n\n    function earnXp(uint _id, uint24 amount) public {\n        require(upgraders[_msgSender()], \"Tell me your tale of failure again.\");\n        CatchableProps storage props = catchableProperties[_id];\n        CatchableBase memory base = baseProperties[props.base];\n        uint16 newBase = 0;\n        uint8 currentLevel = props.level;\n        uint newXp = uint(props.xp) + uint(amount);\n        while (newXp > currentLevel * base.xpLevelRatio) {\n            newXp = newXp - (currentLevel * base.xpLevelRatio);\n            currentLevel++;\n            if (currentLevel >= base.upgradeLevel) {\n                newBase = base.upgrade;\n                base = baseProperties[newBase];\n            }\n        }\n        if (newBase != 0) {\n            props.base = newBase;\n        }\n        props.level = currentLevel;\n        props.xp = uint24(newXp);\n    }\n\n    function registerCatch(uint _id, uint16 _kind, bytes32 random) public {\n        require(_msgSender() == address(dex), \"Only CatchDex can register new catchables\");\n        // use _kind to generate instance\n        CatchableBase memory base = baseProperties[_kind];\n        uint8 gender = base.genderRatio == 0 ? 2 : (uint8(uint(random)) >= base.genderRatio ? 0 : 1);\n\n        bytes32 _random = nextRandom(random);\n        uint16 appearance = uint16(uint(keccak256(abi.encode(_id, _random))));\n\n        _random = nextRandom(_random);\n        uint vitaDiff = uint(_random) % DIFF_RANGE;\n        _random = nextRandom(_random);\n        uint speedDiff = uint(_random) % DIFF_RANGE;\n        _random = nextRandom(_random);\n        uint attackDiff = uint(_random) % DIFF_RANGE;\n        _random = nextRandom(_random);\n        uint defenseDiff = uint(_random) % DIFF_RANGE;\n        _random = nextRandom(_random);\n        uint xAttackDiff = uint(_random) % DIFF_RANGE;\n        _random = nextRandom(_random);\n        uint xDefenseDiff = uint(_random) % DIFF_RANGE;\n\n        catchableProperties[_id] = CatchableProps(\n            _kind,\n            1, // level\n            0, // xp\n            0xffff, // hpPercent\n            gender, // gender\n            appearance, // appearance\n            uint64(\n                vitaDiff << 56 |\n                speedDiff << 48 |\n                attackDiff << 40 |\n                defenseDiff << 32 |\n                xAttackDiff << 24 |\n                xDefenseDiff << 16\n            )\n        );\n    }\n}\n\n// This is a NFT for our catchables\ncontract CatchDex is ERC1155, Ownable, CatchTypes {\n\n    SomeonesPc public pc;\n    // TODO: Should we move zones to someonesPc and only allow minting from there\n    mapping(address => bool) public zones;\n    uint public lastId = 0;\n\n    function setZone(address zone, bool enabled) public onlyOwner {\n        zones[zone] = enabled;\n    }\n\n    function setPc(SomeonesPc _pc) public onlyOwner {\n        pc = _pc;\n    }\n\n    function catchIt(address actor, uint16 kind, bytes32 random) public {\n        SomeonesPc _pc = pc;\n        require(address(_pc) != address(0), \"Could not find PC\");\n        require(zones[_msgSender()], \"Can only catch stuff in the zones\");\n        // We use it NFT style ... each catchable only exists once\n        _mint(actor, lastId, 1, \"\");\n        _pc.registerCatch(lastId, kind, random);\n        lastId = lastId.add(1);\n    }\n\n    function baseProps(uint16 _type) public view returns (CatchableBase memory) {\n        return pc.baseProps(_type);\n    }\n}","compiler":{"name":"solc","version":"0.6.3+commit.8dda9521.Emscripten.clang"},"networks":{"4":{"events":{"0x9622b892afa9dc12bb0afca1095678bb623adb8a0b53eb4874e18ee00c54de84":{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"NextCatchableBlock","type":"event"},"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}},"links":{},"address":"0x2CeDB6eC9a9735F5e2B136fE2e92Eca293CBA5ab","transactionHash":"0x149b8df8ee747f2ebfc4a42891879afa1453b7840efaae455b52282c3d1ba826"},"1583591680367":{"events":{"0x9622b892afa9dc12bb0afca1095678bb623adb8a0b53eb4874e18ee00c54de84":{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"NextCatchableBlock","type":"event"},"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0":{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}},"links":{},"address":"0x1083E3a91D54468Bc4B3527315cE0cb9D7F13476","transactionHash":"0xc5989448207d4036484c5cb1323196a684466bc55de59248402ab2b00ac124c7"}},"schemaVersion":"3.0.23","updatedAt":"2020-03-13T12:12:20.771Z","networkType":"ethereum","devdoc":{"methods":{"isOwner()":{"details":"Returns true if the caller is the current owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"userdoc":{"methods":{}}}